#include <opencv2/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>
#include <stdio.h>
#include <sys/ioctl.h>
#include <linux/fcntl.h>
#include <fstream>
#include <stdlib.h>


#define CHARVIDEO_IOC_MAGIC  '8'

#define CHARVIDEO_IOCHALT    _IO(CHARVIDEO_IOC_MAGIC, 0)
#define CHARVIDEO_IOCSTART    _IO(CHARVIDEO_IOC_MAGIC, 1)
#define CHARVIDEO_IOCSTATUS    _IO(CHARVIDEO_IOC_MAGIC, 2)

#define CHARVIDEO_IOCQHEIGHT _IOR(CHARVIDEO_IOC_MAGIC,  3, int)
#define CHARVIDEO_IOCQWIDTH _IOR(CHARVIDEO_IOC_MAGIC,  4, int)
#define CHARVIDEO_IOCQPIXELLEN _IOR(CHARVIDEO_IOC_MAGIC,  5, int)
#define CHARVIDEO_IOCQBUFSIZE _IOR(CHARVIDEO_IOC_MAGIC,  6, int)



using namespace cv;

int main( int argc, char** argv )
{
 char* imageName = argv[1];

 unsigned char* pixels;

 FILE* in = fopen("/dev/video", "rb");
 Mat image, image2;


 int h, w, l;
 h = ioctl(in->_fileno, CHARVIDEO_IOCQHEIGHT);
 w = ioctl(in->_fileno, CHARVIDEO_IOCQWIDTH);
 l = ioctl(in->_fileno, CHARVIDEO_IOCQPIXELLEN);
 pixels = (unsigned char *)malloc(h*w*l * sizeof(char));



fread(pixels, 1, h * w * l, in);

image  = Mat(h,w,CV_8UC1,&pixels[0]); //in case of BGR image use CV_8UC3


 if( argc != 2 || !image.data )
 {
   printf( " No image data \n " );
   return -1;
 }

 Mat gray_image;
 cvtColor( image, gray_image, CV_BGR2GRAY );

 imwrite( "Gray.jpg", gray_image );



 return 0;
}
