#include <opencv2/core.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>
#include <stdio.h>
#include <sys/ioctl.h>
#include <linux/fcntl.h>
#include <fstream>
#include <stdlib.h>
#include <vector>



#define CHARVIDEO_IOC_MAGIC  '8'

#define CHARVIDEO_IOCHALT    _IO(CHARVIDEO_IOC_MAGIC, 0)
#define CHARVIDEO_IOCSTART    _IO(CHARVIDEO_IOC_MAGIC, 1)
#define CHARVIDEO_IOCSTATUS    _IO(CHARVIDEO_IOC_MAGIC, 2)

#define CHARVIDEO_IOCQHEIGHT _IOR(CHARVIDEO_IOC_MAGIC,  3, int)
#define CHARVIDEO_IOCQWIDTH _IOR(CHARVIDEO_IOC_MAGIC,  4, int)
#define CHARVIDEO_IOCQPIXELLEN _IOR(CHARVIDEO_IOC_MAGIC,  5, int)
#define CHARVIDEO_IOCQBUFSIZE _IOR(CHARVIDEO_IOC_MAGIC,  6, int)



using namespace cv;
using namespace std;

int main( int argc, char** argv )
{


 unsigned char* pixels;

 FILE* in = fopen("/dev/video", "rb");



 int h, w, l;
 h = ioctl(in->_fileno, CHARVIDEO_IOCQHEIGHT);
 w = ioctl(in->_fileno, CHARVIDEO_IOCQWIDTH);
 l = ioctl(in->_fileno, CHARVIDEO_IOCQPIXELLEN);
 cout << h << endl << w << l<< endl;
 pixels = (unsigned char *)malloc(h*w*l * sizeof(char));



fread(pixels, 1, h * w * l, in);

Mat image (h,w,CV_8UC1,&pixels[0]); //in case of BGR image use CV_8UC3




 Mat gray_image;
 //cvtColor( image, gray_image, CV_RGB2GRAY );

 vector<int> compression_params;
     compression_params.push_back(CV_IMWRITE_PNG_COMPRESSION);
     compression_params.push_back(9);

     try {
         imwrite("gray.png", image, compression_params);
     }
     catch (runtime_error& ex) {
         fprintf(stderr, "Exception converting image to PNG format: %s\n", ex.what());
         return 1;
     }




 return 0;
}
